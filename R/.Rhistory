library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
evol <- read_delim("~/Workspaces/Felferning/FlexDiag/R/sourceData/evol.csv",
"|", escape_double = FALSE, trim_ws = TRUE)
View(evol)
setwd("~/Workspaces/Felferning/FlexDiag/R")
library(plyr)
library(doBy)
library(ggplot2)
library(reshape2)
library(stringr)
library(xtable)
library(tableHTML)
generatePlotFlex <- function(plotData,f,lab,output){
plot<-ggplot(plotData, aes(x = as.numeric(m), y = f))  +
theme_bw() +
geom_line(aes(linetype=factor(features)),stat = "identity") +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
geom_point(mapping=aes(x=as.numeric(m), y=f, shape=factor(features)), size=3)+
scale_linetype_discrete(guide=FALSE)+
scale_shape_discrete()+
xlab("Value of m") +
ylab(lab) +
labs(shape = "Number of features")+
theme(legend.position="bottom",legend.text=element_text(size=15)) +
scale_x_continuous(breaks=c(1,2,4,6,10)) + theme(aspect.ratio=0.45)+
annotation_logticks(sides = "l") +
theme(text = element_text(size=13),axis.text.x = element_text(angle=60, hjust=1))+guides(shape=guide_legend(nrow=1,byrow=TRUE))
ggsave(output,  width = 12)
}
generatePlotEvol <- function(plotData,f,lab,output){
plot<-ggplot(plotData, aes(x = as.numeric(features), y = f))  +
theme_bw() +
geom_line() +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
geom_point(mapping=aes(x=as.numeric(features), y=f), size=3)+
scale_linetype_discrete(guide=FALSE)+
scale_shape_discrete()+
xlab("Features") +
ylab(lab) +
theme(legend.position="bottom",legend.text=element_text(size=15)) +
#theme(aspect.ratio=0.45)+
annotation_logticks(sides = "l") +
theme(text = element_text(size=13),axis.text.x = element_text(angle=60, hjust=1))+guides(shape=guide_legend(nrow=1,byrow=TRUE))
ggsave(output,  width = 12)
}
generatePlotComp <- function(plotData,f,lab,output){
plot<-ggplot(plotData, aes(x = factor(features), y = f, group=m))  +
theme_bw() +
geom_line(aes(linetype=factor(m))) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
geom_point(mapping=aes(x=factor(features), y=f, shape=m), size=3)+
scale_linetype_discrete(guide=FALSE)+
scale_shape_discrete(labels = c("Flexdiag(m=1)", "Evolutionary"))+
labs( x = "Features", y = lab, shape = "Search\n") +
theme(legend.position="bottom",legend.text=element_text(size=15)) +
#theme(aspect.ratio=0.45)+
#scale_x_continuous(breaks=c(50,100,500,1000,2000,5000)) +
annotation_logticks(sides = "l") +
theme(text = element_text(size=13),axis.text.x = element_text(angle=60, hjust=1))+
guides(shape=guide_legend(nrow=1,byrow=TRUE))
ggsave(output,  width = 12)
}
generatePlotReal <- function(plotData,f,lab,output){
plot<-ggplot(plotData, aes(x = factor(features), y = f, group=m))  +
theme_bw() +
geom_line(aes(linetype=factor(m),color=factor(m))) +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
geom_point(mapping=aes(x=factor(features), y=f, shape=factor(m)), size=3)+
scale_linetype_discrete(guide=FALSE)+
xlab("Features") +
ylab(lab) +
theme(legend.position="bottom",legend.text=element_text(size=15)) +
#theme(aspect.ratio=0.45)+
#scale_x_continuous(breaks=c(50,100,500,1000,2000,5000)) +
annotation_logticks(sides = "l") +
theme(text = element_text(size=13),axis.text.x = element_text(angle=60, hjust=1))+
guides(shape=guide_legend(nrow=1,byrow=TRUE))
ggsave(output,  width = 12)
}
generatePlotDebianReal <- function(plotData,f,lab,output){
plot<-ggplot(plotData, aes(x = factor(m), y = f, group=m))  +
theme_bw() +
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
geom_bar(stat="identity")+
xlab("m value") +
ylab(lab) +
theme(legend.position="bottom",legend.text=element_text(size=15)) +
#theme(aspect.ratio=0.45)+
annotation_logticks(sides = "l") +
theme(text = element_text(size=13),axis.text.x = element_text(angle=60, hjust=1))+
guides(shape=guide_legend(nrow=1,byrow=TRUE))
ggsave(output,  width = 12)
}
######## Read data
dataFlexGen = read.csv("./processedData/flex-gen.csv", header = TRUE,sep='|')
dataEvol = read.csv("./processedData/evol.csv", header = TRUE,sep='|')
dataFlexReal = read.csv("./processedData/flex-real.csv", header = TRUE,sep='|')
dataFlexAutoSummary = read.csv("./processedData/automotive.csv", header = TRUE,sep='|')
#dataFlexTiny = read.csv("./processedData/tiny.csv", header = TRUE,sep='|')
##remove bad data 5000 missing m=1
dataFlexGen <- subset(dataFlexGen, select = -c(productDesc) )
dataFlexReal <- subset(dataFlexReal, select = -c(productDesc) )
dataFlexGen<-dataFlexGen[which(!dataFlexGen$features==5000),]
dataEvol<-dataEvol[which(!dataEvol$features==5000),]
View(dataFlexAutoSummary)
dataFlexAutoSummary <- summaryBy(time + minimality + accuracy~ model + m + variables+relations, data = dataFlexAutoSummary, FUN = function(x) { c(mean = mean(x)) } )
View(dataFlexAutoSummary)
minSizeCalculation <- function(x){
subset <- data[ which(data$model==x$model ), ]
##force to use fmdiag m=1 for minimal diagnossis avoiding non-complete results from evolutionary
#si tenemos ejecutado con m=1 lo uso, si no el minimo y listo
if(nrow(subset[ which(subset$m==1), ])>0){
subset <- subset[ which(subset$m==1), ]
}
result <-  min(subset$resultSize)
return(result)
}
dataFlexAutoSummary$improvTime <- minSizeCalculation(dataFlexAutoSummary)
dataFlexAutoSummary$improvTime <- minSizeCalculation(dataFlexAutoSummary,dataFlexAutoSummary)
minSizeCalculation <- function(x){
subset <- dataFlexAutoSummary[ which(data$model==x$model ), ]
##force to use fmdiag m=1 for minimal diagnossis avoiding non-complete results from evolutionary
#si tenemos ejecutado con m=1 lo uso, si no el minimo y listo
if(nrow(subset[ which(subset$m==1), ])>0){
subset <- subset[ which(subset$m==1), ]
}
result <-  min(subset$resultSize)
return(result)
}
dataFlexAutoSummary$improvTime <- minSizeCalculation(dataFlexAutoSummary)
