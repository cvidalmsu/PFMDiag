q()
setwd("~/Repositorios/sms-gazpacho/core/rscripts")
library(ggplot2)
library(gridExtra)
library(ggthemes)
source('~/Repositorios/sms-gazpacho/core/rscripts/barplot2.R')
data = read.csv("../output_data/barplot2.csv", header = TRUE,sep=';')
setwd("~/Repositorios/sms-gazpacho/core/rscripts")
setwd("~/Repositorios/sms-gazpacho/core/rscripts")
setwd("~/Repositorios/sms-gazpacho/core/rscripts")
gspan
gspan()
setwd("~/Repositorios/FlexDiag/R")
source('~/Repositorios/FlexDiag/R/1.processData.R')
data<-data[which(m ==1),]
data<-data[which(data$m ==1),]
View(data)
unique(data$result)
count(unique(data$result))
length(unique(data$result))
count(unique(data$model))
data<-data[which(data$accuracy ==1),]
length(unique(data$result))
count(unique(data$model))
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data<-data[which(data$model =="xenial.xml"),]
View(data)
data<-data[which(data$m ==1),]
length(unique(data$result))
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data<-data[which(data$m ==1),]
data<-data[which(data$model =="REAL-FM-20.xml"),]
View(data)
count(unique(data$model))
length(unique(data$result))
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data<-data[which(data$model =="xenial.xml"),]
data<-data[which(data$m ==1),]
length(unique(data$result))
res<-adply(data,1,numberUniquesExplainations,.expand = T)
numberUniquesExplainations <- function(x){
subset <- data[ which(data$model==x$model & data$m==1), ]
return(length(unique(subset$result)));
}
res<-adply(data,1,numberUniquesExplainations,.expand = T)
View(res)
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
res<-adply(data,1,numberUniquesExplainations,.expand = T)
View(res)
length(unique(res$V1))
(unique(res$V1))
res2<-res[which(res$V1 ==11),]
View(res2)
res3<-res2[which(res2$m==1),]
View(res3)
###reading the results
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data$result=str_sub(data$result, 2, str_length(data$result)-1)
###generating duration and number of results
data$end<-as.numeric(as.character(data$end))
data$start<-as.numeric(as.character(data$start))
data$time=data$end-data$start
data$resultSize <- str_count(data$result, ",")+1
if("m" %in% colnames(data))
{
cat("We are processing a flexdiag-based approach!\n");
###calculating the minimal diagnosys size and the minimal diagnosis
data$minSize <- data$min<-adply(data,1, minSizeCalculation,.expand=T)$V1
data$min<-adply(data,1,minCalculation,.expand = T)$V1
###calculating the disjuntion of the minimal explaination and the actual explaination
data$union <- paste(as.character(data$result),as.character(data$min), sep = ", ")
data$union <-adply(data,1,uniqueCount,.expand = T)$V1
###calculating accuracy and minimality
data$accuracy<-(str_count(data$union, ",")+1)/data$minSize
data$minimality <- data$minSize / data$resultSize
}else{
dataFlex = read.csv("./processedData/flex-gen.csv", header = TRUE,sep='|', stringsAsFactors = FALSE)
dataFlex<-dataFlex[which(dataFlex$m ==1),]
data$m<-"evolutionary"
data$minSize<-0
data$min<-""
data$union <-""
data$accuracy<-0
data$minimality <-0
data <- rbind(data,dataFlex)
###calculating the minimal diagnosys size and the minimal diagnosis
data$minSize <- data$min<-adply(data,1, minSizeCalculation,.expand=T)$V1
data$min<-adply(data,1,minCalculation,.expand = T)$V1
###calculating the disjuntion of the minimal explaination and the actual explaination
data$union <- paste(as.character(data$result),as.character(data$min), sep = ", ")
data$union <-adply(data,1,uniqueCount,.expand = T)$V1
###calculating accuracy and minimality
data$accuracy<-(str_count(data$union, ",")+1)/data$minSize
data$minimality <- data$minSize / data$resultSize
data<-data[which(data$m =="evolutionary"),]
#data<-data[ , !(names(data) %in% c("m"))]
}
source('~/Repositorios/FlexDiag/R/1.processData.R')
setwd("~/Repositorios/FlexDiag/R")
source('~/Repositorios/FlexDiag/R/1.processData.R')
source('~/Repositorios/FlexDiag/R/1.processData.R')
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
View(data)
data$result=str_sub(data$result, 2, str_length(data$result)-1)
###generating duration and number of results
data$end<-as.numeric(as.character(data$end))
data$start<-as.numeric(as.character(data$start))
data$time=data$end-data$start
data$resultSize <- str_count(data$result, ",")+1
data$result=str_sub(data$result, 1, str_length(data$result)-1)
#------------- process ----------
#args <- commandArgs(trailingOnly = TRUE)
args<-c("tiny")
inputName<-paste("./sourceData/",args[1],".csv", sep = "")
outputName<-paste("./processedData/",args[1],".csv", sep = "")
###reading the results
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data$result=str_sub(data$result, 2, str_length(data$result)-1)
###generating duration and number of results
data$end<-as.numeric(as.character(data$end))
data$start<-as.numeric(as.character(data$start))
data$time=data$end-data$start
data$resultSize <- str_count(data$result, ",")+1
data$result=gsub('^.|.$', '', data$result)
args<-c("tiny")
inputName<-paste("./sourceData/",args[1],".csv", sep = "")
outputName<-paste("./processedData/",args[1],".csv", sep = "")
###reading the results
data = read.csv(inputName, header = TRUE,sep='|', stringsAsFactors = FALSE)
data$result<-gsub('^.|.$', '', data$result)
data$result=str_sub(data$result, 2, str_length(data$result)-1)
source('~/Repositorios/FlexDiag/R/1.processData.R')
source('~/Repositorios/FlexDiag/R/1.processData.R')
data$end<-as.numeric(as.character(data$end))
source('~/Repositorios/FlexDiag/R/1.processData.R')
source('~/Repositorios/FlexDiag/R/2.generatePlot.R')
dataFlexTiny = read.csv("./processedData/tiny.csv", header = TRUE,sep='|')
dataFlexTinySummary <- summaryBy(dependencies+resultSize+minSize+time + minimality + accuracy~ features + m, data = dataFlexTiny, FUN = function(x) { c(mean = mean(x)) } )
print(xtable(dataFlexTinySummary), include.rownames=FALSE, file="./output/flex-tiny-table.tex")
htmlTable(dataFlexTinySummary)
write_tableHTML(tableHTML(dataFlexTinySummary, rownames = FALSE, caption = 'FlexDiag with Tiny Models'), "./output/flex-gen-table.html", complete_html = FALSE)
print(xtable(dataFlexTinySummary), include.rownames=FALSE, file="./output/flex-tiny-table.tex")
write_tableHTML(tableHTML(dataFlexTinySummary, rownames = FALSE, caption = 'FlexDiag with Tiny Models'), "./output/flex-gen-table.html", complete_html = FALSE)
print(xtable(dataFlexTinySummary), include.rownames=FALSE, file="./output/flex-tiny-table.tex")
write_tableHTML(tableHTML(dataFlexTinySummary, rownames = FALSE, caption = 'FlexDiag with Tiny Models'), "./output/flex-tiny-table.html", complete_html = FALSE)
View(dataFlexTiny)
dataFlexTinySummary <- summaryBy(dependencies+resultSize+minSize+time + minimality + accuracy~ features +product+ m, data = dataFlexTiny, FUN = function(x) { c(mean = mean(x)) } )
## Latex table.
print(xtable(dataFlexTinySummary), include.rownames=FALSE, file="./output/flex-tiny-table.tex")
write_tableHTML(tableHTML(dataFlexTinySummary, rownames = FALSE, caption = 'FlexDiag with Tiny Models'), "./output/flex-tiny-table.html", complete_html = FALSE)
######## Flexdiag Tiny model individual.
dataFlexTinySummary <- summaryBy(dependencies+product+resultSize+minSize+time + minimality + accuracy~ features + m, data = dataFlexTiny, FUN = function(x) { c(mean = mean(x)) } )
## Latex table.
print(xtable(dataFlexTinySummary), include.rownames=FALSE, file="./output/flex-tiny-table.tex")
write_tableHTML(tableHTML(dataFlexTinySummary, rownames = FALSE, caption = 'FlexDiag with Tiny Models'), "./output/flex-tiny-table.html", complete_html = FALSE)
